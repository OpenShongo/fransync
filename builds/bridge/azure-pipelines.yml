trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
- group: 'GLOBAL-FRANSYNC-SECURED'
- name: buildConfiguration
  value: 'Release'
- name: dotnetVersion
  value: '9.0.x'
- name: containerRegistry
  value: 'shongo.azurecr.io'
- name: imageName
  value: 'fransync-bridging'

stages:
- stage: BuildAndTest
  displayName: 'Build and Test'
  jobs:
  - job: Build
    displayName: 'Build .NET Projects and Docker Image'
    steps:
    - checkout: self
      fetchDepth: 0

    - task: UseDotNet@2
      displayName: 'Use .NET 9'
      inputs:
        packageType: 'sdk'
        version: $(dotnetVersion)

    - script: |
        dotnet tool install --global GitVersion.Tool --version 5.12.0
        
        # Run GitVersion and capture output as JSON
        GITVERSION_OUTPUT=$(dotnet-gitversion /output json)
        echo "GitVersion JSON Output:"
        echo "$GITVERSION_OUTPUT"
        
        # Parse JSON and extract version values
        SEMVER=$(echo "$GITVERSION_OUTPUT" | jq -r '.SemVer')
        ASSEMBLY_VER=$(echo "$GITVERSION_OUTPUT" | jq -r '.AssemblySemVer')
        FILE_VER=$(echo "$GITVERSION_OUTPUT" | jq -r '.AssemblySemFileVer')
        INFO_VER=$(echo "$GITVERSION_OUTPUT" | jq -r '.InformationalVersion')
        MAJOR_MINOR_PATCH=$(echo "$GITVERSION_OUTPUT" | jq -r '.MajorMinorPatch')
        COMMITS_SINCE_VERSION=$(echo "$GITVERSION_OUTPUT" | jq -r '.CommitsSinceVersionSource')
        
        # Create custom version with build number: Major.Minor.Patch.BuildNumber
        CUSTOM_VERSION="$MAJOR_MINOR_PATCH.$COMMITS_SINCE_VERSION"
        
        # Set pipeline variables for immediate use
        echo "##vso[task.setvariable variable=GitVersionSemVer]$SEMVER"
        echo "##vso[task.setvariable variable=GitVersionAssemblySemVer]$ASSEMBLY_VER"
        echo "##vso[task.setvariable variable=GitVersionAssemblySemFileVer]$FILE_VER"
        echo "##vso[task.setvariable variable=GitVersionInformationalVersion]$INFO_VER"
        echo "##vso[task.setvariable variable=GitVersionMajorMinorPatch]$MAJOR_MINOR_PATCH"
        echo "##vso[task.setvariable variable=GitVersionCustomVersion]$CUSTOM_VERSION"
        
        # Set output variables for later stages
        echo "##vso[task.setvariable variable=Version;isOutput=true]$SEMVER"
        echo "##vso[task.setvariable variable=AssemblyVersion;isOutput=true]$ASSEMBLY_VER"
        echo "##vso[task.setvariable variable=FileVersion;isOutput=true]$FILE_VER"
        echo "##vso[task.setvariable variable=InformationalVersion;isOutput=true]$INFO_VER"
        echo "##vso[task.setvariable variable=CustomVersion;isOutput=true]$CUSTOM_VERSION"
        
        # Display the versions for debugging
        echo "Version: $SEMVER"
        echo "Assembly Version: $ASSEMBLY_VER"
        echo "File Version: $FILE_VER"
        echo "Informational Version: $INFO_VER"
        echo "Major.Minor.Patch: $MAJOR_MINOR_PATCH"
        echo "Custom Version (with build number): $CUSTOM_VERSION"
        echo "Commits Since Version Source: $COMMITS_SINCE_VERSION"
      displayName: 'Install and Run GitVersion'
      name: setVersionVars

    - task: DotNetCoreCLI@2
      displayName: 'Restore solution'
      inputs:
        command: 'restore'
        projects: '**/*.sln'

    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: 'build'
        projects: '**/*.sln'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Run tests'
      inputs:
        command: 'test'
        projects: '**/*.Tests.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage"'
      continueOnError: true

    - task: PublishTestResults@2
      displayName: 'Publish test results'
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '$(Agent.TempDirectory)/**/*.trx'
        mergeTestResults: true
        failTaskOnFailedTests: false
      condition: always()

    - task: PublishCodeCoverageResults@2
      displayName: 'Publish code coverage'
      inputs:
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
        codeCoverageVersion: 'V2'
      condition: always()

    - task: Docker@2
      displayName: 'Build and Push Docker Image'
      inputs:
        command: 'buildAndPush'
        repository: '$(imageName)'
        dockerfile: '**/Dockerfile'
        containerRegistry: 'shongo-azure-registry'
        buildContext: '.'
        tags: |
          $(GitVersionCustomVersion)
          latest
        arguments: '--build-arg VERSION=$(GitVersionCustomVersion)'

- stage: Production
  displayName: 'Deploy to Production'
  dependsOn: BuildAndTest
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  variables:
    containerAppName: 'fransync-bridging'
    resourceGroupName: 'prod-fransync-rg'
    version: $[ stageDependencies.BuildAndTest.Build.outputs['setVersionVars.CustomVersion'] ]
    containerImage: '$(containerRegistry)/$(imageName):$(version)'
  jobs:
  - deployment: DeployToProduction
    displayName: 'Deploy Container to Production'
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: 'Configure App Service Port'
            inputs:
              azureSubscription: 'prod-fransync-subscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Set the correct port for App Service to route to
                az webapp config appsettings set \
                  --name $(containerAppName) \
                  --resource-group $(resourceGroupName) \
                  --settings WEBSITES_PORT=8080

          - task: AzureCLI@2
            displayName: 'Configure ACR Authentication'
            inputs:
              azureSubscription: 'prod-fransync-subscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Use secured library variables from Key Vault
                echo "Configuring ACR authentication using secured library variables"
                echo "ACR Username: $(acr-username)"
                echo "Using password from secured library"
                
                # Configure App Service with ACR credentials from Key Vault
                az webapp config container set \
                  --name $(containerAppName) \
                  --resource-group $(resourceGroupName) \
                  --docker-custom-image-name $(containerImage) \
                  --docker-registry-server-url https://shongo.azurecr.io \
                  --docker-registry-server-user "$(acr-username)" \
                  --docker-registry-server-password "$(acr-password)"

          - task: AzureWebAppContainer@1
            displayName: 'Deploy to Azure App Service'
            inputs:
              azureSubscription: 'prod-fransync-subscription'
              appName: $(containerAppName)
              resourceGroupName: $(resourceGroupName)
              imageName: $(containerImage)
              appSettings: '-ASPNETCORE_ENVIRONMENT Production -ASPNETCORE_URLS http://+:8080 -VERSION $(version)'