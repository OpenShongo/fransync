trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'
  dotnetVersion: '9.0.x'
  containerRegistry: 'shongo.azurecr.io'
  imageName: 'fransync-bridging'

stages:
- stage: BuildAndTest
  displayName: 'Build and Test'
  jobs:
  - job: Build
    displayName: 'Build .NET Projects and Docker Image'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 9'
      inputs:
        packageType: 'sdk'
        version: $(dotnetVersion)

    - task: gitversion/setup@0
      displayName: 'Install GitVersion'
      inputs:
        versionSpec: '5.x'

    - task: gitversion/execute@0
      displayName: 'Determine Version'
      inputs:
        useConfigFile: true
        configFilePath: 'GitVersion.yml'

    - script: |
        echo "##vso[task.setvariable variable=Version;isOutput=true]$(GitVersion.SemVer)"
        echo "##vso[task.setvariable variable=AssemblyVersion;isOutput=true]$(GitVersion.AssemblySemVer)"
        echo "##vso[task.setvariable variable=FileVersion;isOutput=true]$(GitVersion.AssemblySemFileVer)"
        echo "##vso[task.setvariable variable=InformationalVersion;isOutput=true]$(GitVersion.InformationalVersion)"
        echo "Version: $(GitVersion.SemVer)"
        echo "Assembly Version: $(GitVersion.AssemblySemVer)"
        echo "File Version: $(GitVersion.AssemblySemFileVer)"
        echo "Informational Version: $(GitVersion.InformationalVersion)"
      displayName: 'Set Version Variables'
      name: setVersionVars

    - task: DotNetCoreCLI@2
      displayName: 'Restore packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore /p:Version=$(GitVersion.SemVer) /p:AssemblyVersion=$(GitVersion.AssemblySemVer) /p:FileVersion=$(GitVersion.AssemblySemFileVer) /p:InformationalVersion=$(GitVersion.InformationalVersion)'

    - task: DotNetCoreCLI@2
      displayName: 'Run tests'
      inputs:
        command: 'test'
        projects: '**/*Tests.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage"'
      continueOnError: true

    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: 'build'
        repository: $(imageName)
        dockerfile: 'src/Fransync.Bridging.WebService/Dockerfile'
        buildContext: '.'
        tags: |
          $(GitVersion.SemVer)
          $(GitVersion.MajorMinorPatch)
          latest
        arguments: '--build-arg VERSION=$(GitVersion.SemVer)'

    - task: Docker@2
      displayName: 'Push Docker Image to ACR'
      inputs:
        command: 'push'
        repository: $(imageName)
        containerRegistry: 'shongo-azure-registry'
        tags: |
          $(GitVersion.SemVer)
          $(GitVersion.MajorMinorPatch)
          latest

- stage: Production
  displayName: 'Deploy to Production'
  dependsOn: BuildAndTest
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  variables:
    azureSubscription: 'prod-fransync-bridging'
    containerAppName: 'fransync-bridging'
    resourceGroupName: 'prod-fransync-rg'
    version: $[ stageDependencies.BuildAndTest.Build.outputs['setVersionVars.Version'] ]
    containerImage: '$(containerRegistry)/$(imageName):$(version)'
  jobs:
  - deployment: DeployToProduction
    displayName: 'Deploy Container to Production'
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebAppContainer@1
            displayName: 'Deploy to Azure App Service'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(containerAppName)
              resourceGroupName: $(resourceGroupName)
              imageName: $(containerImage)
              appSettings: |
                -ASPNETCORE_ENVIRONMENT Production
                -ASPNETCORE_URLS http://+:8080
                -VERSION $(version)